{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "type ProgressDirection = 'horizontal' | 'vertical';\n\nenum selectors {\n  COMPONENT = '[wb-autotabs=\"component\"]',\n  PANE = '.w-tab-pane',\n  LINK = '.w-tab-link',\n  CURRENT_CLASS = 'w--current',\n  PROGRESS_BAR = '[wb-autotabs=\"progress\"]',\n  PROGRESS_DIRECTION = 'wb-autotabs-progress-direction',\n}\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  const components = document.querySelectorAll<HTMLDivElement>(selectors.COMPONENT);\n\n  if (components.length === 0) {\n    console.error('no autotabs components found');\n  }\n\n  components.forEach((component, index) => {\n    const links = Array.from(component.querySelectorAll<HTMLAnchorElement>(selectors.LINK));\n    const videos = component.querySelectorAll<HTMLVideoElement>('video');\n    const progressBars = Array.from(\n      component.querySelectorAll<HTMLDivElement>(selectors.PROGRESS_BAR)\n    );\n    // Get current index\n    let currentIndex = links.findIndex((link) => link.classList.contains(selectors.CURRENT_CLASS));\n    let requestId: number;\n\n    // Setup progress bars\n    resetProgressBars(progressBars);\n\n    // Setup videos\n    videos.forEach((video) => {\n      // remove loop attribute to allow onended event to fire\n      video.removeAttribute('loop');\n      video.removeAttribute('autoplay');\n    });\n\n    async function playNextVideo(index: number = currentIndex) {\n      // pause all videos and set playhead back to zero\n      videos.forEach((video) => {\n        video.currentTime = 0;\n        video.pause();\n      });\n\n      // wait a bit to ensure all videos are paused before playing the next one\n      // Race condition: https://stackoverflow.com/questions/36803176/how-to-prevent-the-play-request-was-interrupted-by-a-call-to-pause-error/37172024#37172024\n      await new Promise((resolve) => setTimeout(resolve, 100));\n\n      currentIndex = index;\n      let currentVideo: HTMLVideoElement = videos[currentIndex % videos.length] as HTMLVideoElement;\n      await currentVideo.play();\n      updateProgressBar(currentVideo, progressBars[currentIndex]);\n\n      currentVideo.onended = () => {\n        currentIndex = (currentIndex + 1) % videos.length;\n        simulateClick(links[currentIndex]);\n        playNextVideo(currentIndex);\n      };\n    }\n\n    function updateProgressBar(video: HTMLVideoElement, progressBar: HTMLDivElement) {\n      let progressDirection: string =\n        progressBar.getAttribute(selectors.PROGRESS_DIRECTION) || 'horizontal';\n\n      if (progressDirection !== 'horizontal' && progressDirection !== 'vertical') {\n        console.error('invalid progress direction');\n        return;\n      }\n\n      if (requestId) {\n        cancelAnimationFrame(requestId);\n        resetProgressBars(progressBars);\n      }\n\n      let start: number;\n      function step(timestamp: number) {\n        if (!start) start = timestamp;\n\n        let progress = (timestamp - start) / (video.duration * 1000); // duration is in seconds, timestamp in milliseconds\n        progress = Math.min(progress, 1); // Cap progress at 1 (100%)\n\n        if (progressDirection === 'horizontal') {\n          progressBar.style.transform = `scaleX(${progress})`;\n        } else {\n          progressBar.style.transform = `scaleY(${progress})`;\n        }\n\n        if (progress < 1) {\n          requestId = requestAnimationFrame(step); // Save the request ID\n        }\n      }\n\n      requestId = requestAnimationFrame(step); // Save the request ID\n    }\n\n    function resetProgressBars(progressBars: HTMLDivElement[]) {\n      progressBars.forEach((progressBar) => {\n        let progressDirection: string =\n          progressBar.getAttribute(selectors.PROGRESS_DIRECTION) || 'horizontal';\n\n        if (progressDirection !== 'horizontal' && progressDirection !== 'vertical') {\n          console.error('invalid progress direction');\n          return;\n        }\n        if (progressDirection === 'horizontal') {\n          progressBar.style.transform = 'scaleX(0)';\n        } else {\n          progressBar.style.transform = 'scaleY(0)';\n        }\n      });\n    }\n\n    // detect click on tab link and play next video\n    links.forEach((link, index) => {\n      link.addEventListener('click', () => playNextVideo(index));\n    });\n\n    // Start playing the first video\n    playNextVideo();\n  });\n});\n\n// need to simulate click to trigger tab change\n// using click() causes scroll issues in Safari\nfunction simulateClick(element: HTMLAnchorElement) {\n  let clickEvent = new MouseEvent('click', {\n    view: window,\n    bubbles: true,\n    cancelable: false,\n  });\n  element.dispatchEvent(clickEvent);\n}\n"],
  "mappings": "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",
  "names": ["index", "progressBars"]
}
